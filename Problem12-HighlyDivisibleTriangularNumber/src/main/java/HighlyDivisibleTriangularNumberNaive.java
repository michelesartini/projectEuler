
import net.projecteuler.NumberDivisors;
import net.projecteuler.TriangularNumber;

import java.util.*;

/**
 * Problem 12
 *
 * Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1:  1
 * 3:  1, 3
 * 6:  1, 2, 3, 6
 * 10: 1, 2, 5, 10
 * 15: 1, 3, 5, 15
 * 21: 1, 3, 7, 21
 * 28: 1, 2, 4, 7, 14, 28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Created by michelesartini on 15/06/2015.
 */
public class HighlyDivisibleTriangularNumberNaive {

    public static final int LIMIT = 500;

    public static void main(String args[]) {
        List<Integer> divisors;
        int number = 4;

        long start = System.currentTimeMillis();
        for (; true; number++) {
            if (TriangularNumber.isTriangularNumber(number)) {
                System.out.println(String.format("Processing number: %d", number));
                divisors = NumberDivisors.numberDivisorsImproved(number);
                if (divisors.size() >= LIMIT) {
                    break;
                }
            }
        }
        long end = System.currentTimeMillis();

        System.out.println(String.format("The triangle number with more than %d divisors is: %d", LIMIT, number));
        Collections.sort(divisors);
        System.out.println("Divisors " + divisors);

        end = end - start;
        System.out.println("Execution time: " + end + "(ms)");
    }
}
